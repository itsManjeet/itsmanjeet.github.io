{"version":3,"file":"bundle.js","mappings":"mBAAO,SAASA,EAAcC,GAC1B,IAAMC,EAAMC,SAASC,cAAc,OAEnC,OADAF,EAAIG,UAAYJ,EAAKK,OACDJ,EAAIK,iBAC5B,C,ycCFA,cAGI,WAAYC,GACR,QAAK,UAACA,EAAIC,MAAO,CACbC,MAAO,CAAC,UAAW,UACnBC,IAAKH,EAAIG,IACTC,EAAG,SACHC,EAAG,SACHC,OAAsBX,SAASY,eAAe,WAAYC,gBAC5D,K,OACF,EAAKC,WAAW,CACZC,MAAO,EACPR,MAAO,SACPS,MAAO,yBACPC,MAAO,SAACC,EAAOC,GACXA,EAAOC,MAAK,EAChB,IAGJC,YAAW,WACP,EAAKC,UAAS,EAClB,GAAG,KAEH,EAAKjB,IAAMA,E,CACf,CACJ,OA1BqC,OA0BrC,EA1BA,CAAqCkB,Q,0dCArC,aAGI,WAAYC,GACRC,KAAKC,IAAMF,CACf,CAKJ,OAHI,YAAAG,OAAA,SAAOC,GACHA,EAAUC,YAAYJ,KAAKC,IAC/B,EACJ,EAVA,GAYA,cAII,WAAYF,GACR,QAAK,UAAC3B,EAAc,yCAAuC,K,OAC3D,EAAK2B,OAASA,EAEd,EAAKA,OAAOM,aAAa,iBAAkB,YAC3C,EAAKJ,IAAIG,YAAY,EAAKL,QAG1B,EAAKO,KAAOlC,EAAc,mCAC1B,EAAK6B,IAAIG,YAAY,EAAKE,M,CAC9B,CAUJ,OAxBsC,OAgBlC,YAAAC,YAAA,SAAYR,EAAqBS,GAC7B,IAAMC,EAAOrC,EAAc,mCAC3BqC,EAAKC,iBAAiB,SAAS,WAAM,OAAAF,GAAA,IACrCC,EAAKL,YAAYL,GACjBC,KAAKM,KAAKF,YAAYK,EAC1B,EAGJ,EAxBA,CAAsCE,GAgCtC,GANA,YACI,WAAYC,EAAcC,GACtB,YADsB,IAAAA,IAAAA,OAAA,GACtB,EAAK,UAACzC,EAAc,kEAA2DwC,EAAI,sBAAmBE,IAAVD,EAAsB,IAAMA,EAAQ,GAAE,gBAAa,IACnJ,CAH4C,MAIhD,CAJA,CAAgDE,GAMhD,YACI,WAAYH,EAAcC,EAAuCL,QAAvC,IAAAK,IAAAA,OAAA,GACtB,QAAK,UAACzC,EAAc,kEAA2DwC,EAAI,sBAAmBE,IAAVD,EAAsB,IAAMA,EAAQ,GAAE,gBAAa,K,OAC/I,EAAKZ,IAAIS,iBAAiB,QAASF,G,CACvC,CACJ,OAL4C,OAK5C,EALA,CAA4CG,IC1CtCK,EAAiC,GACvC,CAAC,QAAS,SAAU,aAAc,QAAS,UAAW,WAAY,YAAYC,SAAQ,SAAAC,GAClFF,EAAgBG,KAAK,CACjBD,GAAI,UAAGA,GACPrC,MAAO,UAAGqC,GACVnC,IAAK,gBAASmC,EAAE,eAChBN,KAAM,gBAASM,EAAE,cAEzB,IAGA,IAAME,EAAmC,CACrC,CACIC,KAAM,SACNT,KAAM,2BACNU,KAAM,OACNvC,IAAK,KAIAwC,EACW,WAAc,0CADzBA,EAEY,WAA0B,OAAAP,CAAA,EAFtCO,EAGa,WAA2B,OAAAH,CAAA,EAHxCG,EAIiB,WAA0B,OAAAP,EAAgBQ,QAAO,SAAA5C,GAAO,YAA4FkC,IAA5F,CAAC,QAAS,SAAU,WAAY,WAAY,eAAeW,MAAK,SAAAP,GAAM,OAAAtC,EAAIC,QAAUqC,CAAd,GAAtE,GAA9B,EC1BxD,0BACY,KAAAQ,SAA8B,EAW1C,QATI,YAAAC,OAAA,SAAOlC,GACH,IAAc,UAAAO,KAAK0B,SAAL,eAAe,EACzBE,EADM,MACJnC,EACN,CACJ,EAEA,YAAAoC,SAAA,SAASC,GACL9B,KAAK0B,SAASP,KAAKW,EACvB,EACJ,EAZA,GCKA,aAMI,aACI9B,KAAK+B,QAAU,IAAIC,IACnBhC,KAAKiC,UAAY,EACjBjC,KAAKkC,kBAAoB,IAAIC,EAC7BnC,KAAKoC,qBAAuB,IAAID,CACpC,CA2BJ,OAzBI,YAAAE,QAAA,SAAQC,GACJ,IAAMC,EAAa,CACfrB,KAAMlB,KAAKiC,UACXK,KAAMA,GAIV,OAFAtC,KAAK+B,QAAQS,IAAID,EAAKrB,GAAIqB,GAC1BvC,KAAKkC,kBAAkBP,OAAOY,GACvBA,CACX,EAEA,YAAAE,WAAA,SAAWvB,GACP,IAAMqB,EAAOvC,KAAK+B,QAAQW,IAAIxB,QACjBJ,IAATyB,IACAvC,KAAK+B,QAAQY,OAAOzB,GACpBlB,KAAKoC,qBAAqBT,OAAOY,GAEzC,EAEA,YAAAK,UAAA,SAAUC,GACN7C,KAAKkC,kBAAkBL,SAASgB,EACpC,EAEA,YAAAC,aAAA,SAAaC,GACT/C,KAAKoC,qBAAqBP,SAASkB,EACvC,EACJ,EAtCA,GCAA,aAGI,aACI/C,KAAKgD,SAAW,IAAIhB,GACxB,CAaJ,OAXI,YAAAH,SAAA,SAASX,EAAY+B,GACjBjD,KAAKgD,SAASR,IAAItB,EAAI+B,EAC1B,EAEA,YAAAC,KAAA,SAAKC,EAAgBC,GACjB,IAAMH,EAAUjD,KAAKgD,SAASN,IAAIS,GAClC,OAAIF,QACO,IAAII,MAAM,0BAAmBF,IAEjCF,EAAQG,EACnB,EACJ,EAlBA,GCJaE,EAAc,IAAIC,E,GACD,IAAIC,E,ydCElC,cAGI,aACI,QAAK,UAACpF,EAAc,iIAA+H,KAHvJ,EAAAqF,WAAqB,EAKjB,IAAMC,EAAQtF,EAAc,sXAU5BG,SAASoF,KAAKvD,YAAYsD,GAC1B,IAAME,EAAmBrF,SAASY,eAAe,W,OACzB,MAApByE,GACArC,IAAwCsC,KAAI,SAAAjF,GACxC,IAAMkF,EAAY1F,EAAc,uIAEhCQ,EAAIgC,KAAI,kBAAUhC,EAAIC,MAAK,2JAEYD,EAAIC,MAAK,kCAGhDiF,EAAUpD,iBAAiB,SAAS,WAChC,IAAMqD,EAAkB,IAAIC,EAAgBpF,GACtC2D,EAAOe,EAAYjB,QAAQ0B,GACjCA,EAAgBE,QAAU,SAACC,GAEvB,OADAZ,EAAYb,WAAWF,EAAKrB,KACrB,CACX,CACJ,IACA,IAAMiD,EAAY/F,EAAc,2BAChC+F,EAAU/D,YAAY0D,GACtBF,EAAiBxD,YAAY+D,EACjC,I,CAYR,CACJ,OAnD6B,OAmD7B,EAnDA,CAA6BxD,G,0dCqB7B,cACI,aACI,QAAK,UAACvC,EAAc,wDAAsD,K,OAC1EgG,aAAY,WAAM,SAAKC,YAAL,GAAmB,K,CACzC,CAWJ,OAfiC,OAM7B,YAAAA,WAAA,WACI,IAAMC,EAAO,IAAIC,KACXC,EAAU,CAAC,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAOF,EAAKG,UAC3DC,EAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,MAAO,MAAO,OAAOJ,EAAKK,YACzGC,EAAWN,EAAKO,UAChBC,EAAOR,EAAKS,WACZC,EAAUV,EAAKW,aACrBjF,KAAKD,OAAOmF,UAAY,UAAGV,EAAO,aAAKE,EAAS,YAAIE,EAAQ,aAAKE,EAAI,YAAIE,EAC7E,EACJ,EAfA,CAAiCjE,G,0dCzBjC,cAEI,aACI,QAAK,UAAC,qBAAiBD,GAAW,WAC1B,EAAKqE,aACL5G,SAAS6G,iBAAiBC,MAAK,WAC3B,EAAKF,cAAe,CACxB,IAEA5G,SAAS+G,gBAAgBC,oBAAoBF,MAAK,WAC9C,EAAKF,cAAe,CACxB,GAER,KAAE,K,OAZN,EAAAA,cAAwB,E,CAaxB,CACJ,OAfsC,OAetC,EAfA,CAAsCK,GCQtC,aAKI,WAAY5G,GACKA,EAAIgC,KACjBZ,KAAKC,IAAM7B,EAAc,6JAEaQ,EAAIgC,KAAI,yBAE9CZ,KAAKyF,MAAQrH,EAAc,uHAC3B4B,KAAKC,IAAIG,YAAYJ,KAAKyF,OAC1BzF,KAAK0F,UAAW,CACpB,CAUJ,OARI,YAAAC,SAAA,SAASF,GACLzF,KAAKyF,MAAMP,UAAYO,EAAMG,WAEzB5F,KAAKyF,MAAMI,MAAMC,QADP,IAAVL,EAC2B,OAEA,OAEnC,EACJ,EAxBA,GA0BA,aAaI,wBACIzF,KAAKC,IAAM7B,EAAc,iFACzB,IAAM2H,EAAe3H,EAAc,2BACnC4B,KAAKC,IAAIG,YAAY2F,GAErB/F,KAAKgG,eAAiB5H,EAAc,+EACpC4B,KAAKiG,aAAe7H,EAAc,qHAElC2H,EAAa3F,YAAYJ,KAAKgG,gBAC9BD,EAAa3F,YAAYJ,KAAKiG,cAG9BjG,KAAKkG,QAAU,IAAIC,EACnBnG,KAAKkG,QAAQhG,OAAOF,KAAKgG,iBAEzB,IAAII,GAAclG,OAAOF,KAAKiG,eAC9B,IAAII,GAAmBnG,OAAOF,KAAKiG,cAEnCjG,KAAKsG,cAAgBlI,EAAc,iDACnC4B,KAAKgG,eAAe5F,YAAYJ,KAAKsG,eACrCtG,KAAKuG,UAAY,IAAIvE,IACrBhC,KAAKwG,MAAQ,IAAIxE,IAEjBT,IAA6CsC,KAAI,SAAA4C,GAC7C,IAAMC,EAAW,IAAIC,EAAUF,GAC/BC,EAAShB,UAAW,EACpB,EAAKkB,aAAaH,EAAaC,EACnC,IAEApD,EAAYV,WAAU,SAAAL,GAClB,IAWYsE,EAXNC,EAA6BvE,EAAKD,KAClCyE,EAAqB,EAAKP,MAAM9D,IAAIoE,EAAUlI,IAAIsC,IAC5B,iBAAjB4F,EAAU5F,UACUJ,IAAvBiG,GACAA,EAAmB5F,KAAKoB,QAENzB,KADZ+F,EAAY,EAAKN,UAAU7D,IAAIoE,EAAUlI,IAAIsC,MAE/C2F,EAAUlB,SAASoB,EAAmBC,UAG1C,EAAKR,MAAMhE,IAAIsE,EAAUlI,IAAIsC,GAAI,IAAI+F,MAAY1E,SAE/BzB,KADd+F,EAAY,EAAKN,UAAU7D,IAAIoE,EAAUlI,IAAIsC,OAE7C2F,EAAY,IAAIF,EAAUG,EAAUlI,MAEnCiI,EAAUnB,UACX,EAAKkB,aAAaE,EAAUlI,IAAKiI,GAErCA,EAAUlB,SAAS,IAG/B,IACArC,EAAYR,cAAa,SAAAP,GACrB,IAAMuE,EAA6BvE,EAAKD,KACpC4E,EAAW,EAAKV,MAAM9D,IAAIoE,EAAUlI,IAAIsC,IAC5C,QAAiBJ,IAAboG,EAAwB,CACxBA,EAAWA,EAAS1F,QAAO,SAAA2F,GAAK,OAAAA,EAAEjG,KAAOqB,EAAKrB,EAAd,IAChC,IAAMkG,EAAW,EAAKb,UAAU7D,IAAIoE,EAAUlI,IAAIsC,SACjCJ,IAAbsG,GACAA,EAASzB,SAASuB,EAASF,QAEP,IAApBE,EAASF,aACQlG,IAAbsG,IACKA,EAAS1B,UACV,EAAK2B,gBAAgBD,IAG7B,EAAKZ,MAAM7D,OAAOmE,EAAUlI,IAAIsC,KAEhC,EAAKsF,MAAMhE,IAAIsE,EAAUlI,IAAIsC,GAAIgG,EAGzC,CACJ,GACJ,CAoCJ,OAlCI,YAAAN,aAAA,SAAaH,EAA0BI,GAAvC,WAwBI,OAvBA7G,KAAKuG,UAAU/D,IAAIiE,EAAYvF,GAAI2F,GACnC7G,KAAKsG,cAAclG,YAAYyG,EAAU5G,KAEzC4G,EAAU5G,IAAIS,iBAAiB,SAAS,WACpC,IAAM4G,EAA0B,EAAKd,MAAM9D,IAAI+D,EAAYvF,IAC3D,QAAgCJ,IAA5BwG,EAAuC,CACvC,IACM,EAD+BA,EAAwB,GAAGhF,KACnCiF,OAC7BD,EAAwBrG,SAAQ,SAAAsB,GACSA,EAAS,KACnC5C,MAAM,EACrB,GACJ,MAAO,GAAIkH,EAAUnB,SAAU,CAC3BmB,EAAUlB,SAAS,GACnB,IAAM5B,EAAkB,IAAIC,EAAgByC,GACtC,EAAOnD,EAAYjB,QAAQ0B,GACjCA,EAAgBE,QAAU,SAACC,GAEvB,OADAZ,EAAYb,WAAW,EAAKvB,KACrB,CACX,CACJ,CACJ,IAEO2F,CACX,EAEA,YAAAQ,gBAAA,SAAgBR,GACZ7G,KAAKsG,cAAckB,YAAYX,EAAU5G,IAC7C,EAEA,YAAAC,OAAA,SAAOC,GACHA,EAAUC,YAAYJ,KAAKC,IAC/B,EACJ,EA3HA,GCtBA,aAGI,wBACID,KAAKC,IAAM7B,EAAc,uFAIzBmD,IAAyCsC,KAAI,SAAA4D,GACzC,EAAKC,QAAQD,EACjB,GACJ,CAiCJ,OA/BI,YAAAC,QAAA,SAAQD,GACJ,IAAMnJ,EAAMF,EAAc,yEAElBqJ,EAAM7G,KAAI,6EAAqE6G,EAAMpG,KAAI,wEAC/CoG,EAAMpG,KAAI,mBAG5D/C,EAAIoC,iBAAiB,SAAS,WAC1B,IAAMhB,EAAS,IAAIsE,EAAgB,CAC/BnF,MAAO4I,EAAMpG,KACbH,GAAIuG,EAAMpG,KACVT,KAAM6G,EAAM7G,KACZ7B,IAAK0I,EAAM1I,MAETwD,EAAOe,EAAYjB,QAAQ3C,GACjCA,EAAOuE,QAAU,SAACC,GAEd,OADAZ,EAAYb,WAAWF,EAAKrB,KACrB,CACX,CAEJ,IACAlB,KAAKC,IAAIG,YAAY9B,EACzB,EAEA,YAAA4B,OAAA,SAAOC,GACH,IAAMwH,EAASvJ,EAAc,2DAG7BuJ,EAAOvH,YAAYJ,KAAKC,KACxBE,EAAUC,YAAYuH,EAC1B,EACJ,EA5CA,GCTApJ,SAASqJ,cAAgB,SAACnI,GAAU,UAEpC,IAAMoI,EAAOtJ,SAASY,eAAe,QACxB,OAAT0I,GACAtJ,SAASmC,iBAAiB,oBAAoB,WAC1C,IAAMoH,EAAkB,CACpB,sBACA,2BACA,4BACA,gCACA,uBACA,yBACA,8BAGEC,EAAcxJ,SAASY,eAAe,gBACtC6I,EAAkBzJ,SAASY,eAAe,oBAC5C8I,EAAe,EACbC,EAAa9D,aAAY,WAC3B,GAAI6D,GAAgBH,EAAgBd,OAAQ,CACxCmB,cAAcD,GACd,IAAME,EAAoB7J,SAASY,eAAe,sBACzB,MAArBiJ,GACAP,EAAKL,YAAYY,GAErB7J,SAASoF,KAAKkC,MAAMwC,WAAa,GACjC9J,SAASoF,KAAKkC,MAAMyC,gBAAkB,eAAQ/G,IAAsC,OAEpE,IAAIgH,GACZrI,OAAO2H,IAKC,IAAIW,GACZtI,OAAO2H,EACnB,CACmB,MAAfE,IACAA,EAAYlC,MAAM4C,MAAUR,EAAeH,EAAgBd,OAAU,IAAO,KAGzD,MAAnBgB,IACAA,EAAgB9C,UAAY4C,EAAgBG,IAGhDA,GACJ,GAAG,IACP,G","sources":["webpack://profile_os/./src/Utilities/CreateElement.ts","webpack://profile_os/./src/Components/DraggableWindow.ts","webpack://profile_os/./src/Components/Widgets/TaskbarMenuEntry.ts","webpack://profile_os/./config.ts","webpack://profile_os/./src/System/EventDispatcher.ts","webpack://profile_os/./src/System/TaskManager.ts","webpack://profile_os/./src/System/ServiceManager.ts","webpack://profile_os/./src/globals.ts","webpack://profile_os/./src/Components/AppMenu.ts","webpack://profile_os/./src/Components/Widgets/Clock.ts","webpack://profile_os/./src/Components/Widgets/FullscreenWidget.ts","webpack://profile_os/./src/Components/Taskbar.ts","webpack://profile_os/./src/Components/Desktop.ts","webpack://profile_os/./src/index.ts"],"sourcesContent":["export function CreateElement(html: string): HTMLElement {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html.trim();\r\n    return <HTMLElement>div.firstElementChild;\r\n}","import {Application} from \"../Types/Application\";\r\n\r\nexport class DraggableWindow extends WinBox {\r\n    app: Application;\r\n\r\n    constructor(app: Application) {\r\n        super(app.title, {\r\n            class: ['no-full', 'no-min'],\r\n            url: app.url,\r\n            x: 'center',\r\n            y: 'center',\r\n            bottom: (<HTMLElement>document.getElementById('taskbar')).offsetHeight,\r\n        });\r\n        this.addControl({\r\n            index: 1,\r\n            class: 'wb-max',\r\n            image: './img/controls/min.svg',\r\n            click: (event, window) => {\r\n                window.hide(true);\r\n            }\r\n        })\r\n\r\n        setTimeout(() => {\r\n            this.maximize(true);\r\n        }, 500);\r\n\r\n        this.app = app;\r\n    }\r\n}\r\n\r\ninterface AddControl {\r\n    index: number;\r\n    class: string;\r\n    image: string;\r\n    click: (event: Event, window: WinBox) => void;\r\n}\r\n\r\n\r\ninterface WinBox {\r\n\r\n    dom: Node;\r\n\r\n    background: string;\r\n\r\n    body: HTMLElement;\r\n\r\n    border: string | number;\r\n\r\n\r\n    class: string | string[];\r\n\r\n\r\n    html: string;\r\n\r\n    id: string | number;\r\n\r\n    index: number;\r\n\r\n    max: boolean;\r\n\r\n    min: boolean;\r\n\r\n    modal: boolean;\r\n\r\n    root: Node;\r\n\r\n    title: string;\r\n\r\n    url: string;\r\n\r\n    onfocus: (this: WinBox) => void;\r\n\r\n    onblur: (this: WinBox) => void;\r\n\r\n    onresize: (this: WinBox, width: number, height: number) => void;\r\n\r\n    onmove: (this: WinBox, x: number, y: number) => void;\r\n\r\n    onclose: (this: WinBox, force: boolean) => boolean;\r\n\r\n    get hidden(): boolean;\r\n\r\n    mount(src?: Element): WinBox;\r\n\r\n    unmount(dest?: Element): WinBox;\r\n\r\n    setTitle(title: string): WinBox;\r\n\r\n    setBackground(background: string): WinBox;\r\n\r\n    setUrl(url: string): WinBox;\r\n\r\n    focus(): WinBox;\r\n\r\n    hide(hidden: boolean): WinBox;\r\n\r\n    show(): WinBox;\r\n\r\n    minimize(state?: boolean): WinBox;\r\n\r\n    maximize(state?: boolean): WinBox;\r\n\r\n    fullscreen(state?: boolean): WinBox;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\r\n\r\n    close(force?: boolean): boolean | void;\r\n\r\n    move(x?: string | number, y?: string | number, skipUpdate?: boolean): WinBox;\r\n\r\n    resize(w?: string | number, h?: string | number, skipUpdate?: boolean): WinBox;\r\n\r\n    addClass(classname: string): WinBox;\r\n\r\n    addControl(config: AddControl): void;\r\n\r\n    removeClass(classname: string): WinBox;\r\n\r\n}\r\n\r\ndeclare namespace WinBox {\r\n\r\n    interface WinBoxConstructor {\r\n\r\n        (title: string, params?: Params): WinBox;\r\n\r\n        (params: Params): WinBox;\r\n\r\n        new(title: string, params?: Params): WinBox;\r\n\r\n        new(params: Params): WinBox;\r\n\r\n    }\r\n\r\n\r\n    interface Params {\r\n\r\n        background?: string | undefined;\r\n\r\n        body?: HTMLElement | undefined;\r\n\r\n        border?: string | number | undefined;\r\n\r\n        bottom?: string | number | undefined;\r\n\r\n        class?: string | string[] | undefined;\r\n\r\n        height?: string | number | undefined;\r\n\r\n        html?: string | undefined;\r\n\r\n        id?: string | number | undefined;\r\n\r\n        index?: number | undefined;\r\n\r\n        left?: string | number | undefined;\r\n\r\n        max?: boolean | undefined;\r\n\r\n        min?: boolean | undefined;\r\n\r\n        minheight?: string | number | undefined;\r\n\r\n        minwidth?: string | number | undefined;\r\n\r\n        modal?: boolean | undefined;\r\n\r\n        mount?: Node | undefined;\r\n\r\n        right?: string | number | undefined;\r\n\r\n        root?: Node | undefined;\r\n\r\n        splitscreen?: boolean | undefined;\r\n\r\n        title?: string | undefined;\r\n\r\n        top?: string | number | undefined;\r\n\r\n        url?: string | undefined;\r\n\r\n        width?: string | number | undefined;\r\n\r\n        x?: \"right\" | \"center\" | string | number | undefined;\r\n\r\n        y?: \"bottom\" | \"center\" | string | number | undefined;\r\n\r\n        onclose?: ((this: WinBox, force?: boolean) => boolean) | undefined;\r\n\r\n        onfocus?: ((this: WinBox) => void) | undefined;\r\n\r\n        onblur?: ((this: WinBox) => void) | undefined;\r\n\r\n        onresize?: ((this: WinBox, width: number, height: number) => void) | undefined;\r\n\r\n        onmove?: ((this: WinBox, x: number, y: number) => void) | undefined;\r\n\r\n    }\r\n\r\n\r\n    interface Params {\r\n\r\n        background?: string | undefined;\r\n\r\n        body?: HTMLElement | undefined;\r\n\r\n        border?: string | number | undefined;\r\n\r\n        bottom?: string | number | undefined;\r\n\r\n        class?: string | string[] | undefined;\r\n\r\n        height?: string | number | undefined;\r\n\r\n        html?: string | undefined;\r\n\r\n        id?: string | number | undefined;\r\n\r\n        index?: number | undefined;\r\n\r\n        left?: string | number | undefined;\r\n\r\n        max?: boolean | undefined;\r\n\r\n        modal?: boolean | undefined;\r\n\r\n        mount?: Node | undefined;\r\n\r\n        right?: string | number | undefined;\r\n\r\n        root?: Node | undefined;\r\n\r\n        title?: string | undefined;\r\n\r\n        top?: string | number | undefined;\r\n\r\n        url?: string | undefined;\r\n\r\n        width?: string | number | undefined;\r\n\r\n        x?: \"right\" | \"center\" | string | number | undefined;\r\n\r\n        y?: \"bottom\" | \"center\" | string | number | undefined;\r\n\r\n        onclose?: ((this: WinBox, force?: boolean) => boolean) | undefined;\r\n\r\n        onfocus?: ((this: WinBox) => void) | undefined;\r\n\r\n        onblur?: ((this: WinBox) => void) | undefined;\r\n\r\n        onresize?: ((this: WinBox, width: number, height: number) => void) | undefined;\r\n\r\n        onmove?: ((this: WinBox, x: number, y: number) => void) | undefined;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\ndeclare const WinBox: WinBox.WinBoxConstructor & {\r\n\r\n    new: ((title: string, params?: WinBox.Params) => WinBox) | ((params: WinBox.Params) => WinBox);\r\n\r\n};\r\n","import {CreateElement} from \"../../Utilities/CreateElement\";\n\nexport class TaskbarEntry {\n    dom: HTMLElement;\n\n    constructor(widget: HTMLElement) {\n        this.dom = widget;\n    }\n\n    render(container: HTMLElement) {\n        container.appendChild(this.dom);\n    }\n}\n\nexport class TaskbarMenuEntry extends TaskbarEntry {\n    widget: HTMLElement;\n    menu: HTMLElement;\n\n    constructor(widget: HTMLElement) {\n        super(CreateElement(`<div class=\"dropdown-center\"></div>`));\n        this.widget = widget;\n        // this.widget.classList.add(\"dropdown-toggle\");\n        this.widget.setAttribute(\"data-bs-toggle\", \"dropdown\");\n        this.dom.appendChild(this.widget);\n\n\n        this.menu = CreateElement(`<ul class=\"dropdown-menu\"></ul>`);\n        this.dom.appendChild(this.menu);\n    }\n\n    addMenuItem(widget: HTMLElement, action: () => void) {\n        const item = CreateElement(`<li class=\"dropdown-item\"></li>`);\n        item.addEventListener('click', () => action());\n        item.appendChild(widget);\n        this.menu.appendChild(item);\n    }\n\n\n}\n\nexport class TaskbarMenuEntryIconButton extends TaskbarMenuEntry {\n    constructor(icon: string, label: string | undefined = undefined) {\n        super(CreateElement(`<button class=\"btn border-0\" type=\"button\"><i class=\"bi ${icon}\"></i>${label !== undefined ? \" \" + label : \"\"}</button>`));\n    }\n}\n\nexport class TaskbarEntryIconButton extends TaskbarEntry {\n    constructor(icon: string, label: string | undefined = undefined, action: () => void) {\n        super(CreateElement(`<button class=\"btn border-0\" type=\"button\"><i class=\"bi ${icon}\"></i>${label !== undefined ? \" \" + label : \"\"}</button>`));\n        this.dom.addEventListener('click', action);\n    }\n}","import {Configuration} from \"./src/Types/Configuration\";\r\nimport {Application} from \"./src/Types/Application\";\r\nimport {DesktopEntry} from \"./src/Components/Desktop\";\r\n\r\nconst applicationData: Application[] = [];\r\n['files', 'camera', \"calculator\", \"music\", \"notepad\", \"settings\", \"terminal\"].forEach(id => {\r\n    applicationData.push({\r\n        id: `${id}`,\r\n        title: `${id}`,\r\n        url: `/apps/${id}/index.html`,\r\n        icon: `/apps/${id}/icon.svg`\r\n    })\r\n});\r\n\r\n\r\nconst desktopEntryData: DesktopEntry[] = [\r\n    {\r\n        name: \"resume\",\r\n        icon: \"./img/icons/pdf-file.svg\",\r\n        type: \"file\",\r\n        url: \"\",\r\n    }\r\n];\r\n\r\nexport const userConfiguration: Configuration = {\r\n    BackgroundProvider: (): string => \"./img/wallpapers/background.jpeg\",\r\n    ApplicationProvider: (): Array<Application> => applicationData,\r\n    DesktopEntryProvider: (): Array<DesktopEntry> => desktopEntryData,\r\n    PinnedApplicationProvide: (): Array<Application> => applicationData.filter(app => [\"Files\", \"Camera\", \"Settings\", \"Terminal\", \"MediaPlayer\"].find(id => app.title === id) !== undefined),\r\n};","export type EventHandler<E> = (event: E) => void;\r\n\r\nexport class EventDispatcher<E> {\r\n    private handlers: EventHandler<E>[] = [];\r\n\r\n    handle(event: E) {\r\n        for (let h of this.handlers) {\r\n            h(event);\r\n        }\r\n    }\r\n\r\n    register(handler: EventHandler<E>) {\r\n        this.handlers.push(handler);\r\n    }\r\n}","import {EventDispatcher, EventHandler} from \"./EventDispatcher\";\r\n\r\nexport interface Task {\r\n    id: number;\r\n    data: any;\r\n}\r\n\r\nexport class TaskManager {\r\n    newTaskDispatcher: EventDispatcher<Task>;\r\n    removeTaskDispatcher: EventDispatcher<Task>;\r\n    running: Map<number, Task>;\r\n    processes: number;\r\n\r\n    constructor() {\r\n        this.running = new Map<number, Task>();\r\n        this.processes = 0;\r\n        this.newTaskDispatcher = new EventDispatcher<Task>();\r\n        this.removeTaskDispatcher = new EventDispatcher<Task>();\r\n    }\r\n\r\n    addTask(data: any): Task {\r\n        const task: Task = {\r\n            id: ++this.processes,\r\n            data: data,\r\n        };\r\n        this.running.set(task.id, task);\r\n        this.newTaskDispatcher.handle(task);\r\n        return task;\r\n    }\r\n\r\n    removeTask(id: number) {\r\n        const task = this.running.get(id);\r\n        if (task !== undefined) {\r\n            this.running.delete(id);\r\n            this.removeTaskDispatcher.handle(task);\r\n        }\r\n    }\r\n\r\n    onNewTask(newTaskHandler: EventHandler<Task>) {\r\n        this.newTaskDispatcher.register(newTaskHandler);\r\n    }\r\n\r\n    onRemoveTask(removeTaskHandler: EventHandler<Task>) {\r\n        this.removeTaskDispatcher.register(removeTaskHandler);\r\n    }\r\n}","export type ServiceMessage = {\r\n    method: string;\r\n    args: any;\r\n}\r\nexport type Service = (message: ServiceMessage) => any;\r\n\r\n\r\nexport class ServiceManager {\r\n    services: Map<string, Service>;\r\n\r\n    constructor() {\r\n        this.services = new Map<string, Service>();\r\n    }\r\n\r\n    register(id: string, service: Service) {\r\n        this.services.set(id, service);\r\n    }\r\n\r\n    call(target: string, message: ServiceMessage): any {\r\n        const service = this.services.get(target);\r\n        if (service === null || service === undefined) {\r\n            return new Error(`unknown service ${target}`);\r\n        }\r\n        return service(message);\r\n    }\r\n}\r\n","import {TaskManager} from \"./System/TaskManager\";\r\nimport {ServiceManager} from \"./System/ServiceManager\";\r\n\r\nexport const taskManager = new TaskManager();\r\nexport const serviceManager = new ServiceManager();","import {TaskbarEntry} from \"./Widgets/TaskbarMenuEntry\";\r\nimport {userConfiguration} from \"../../config\";\r\nimport {CreateElement} from \"../Utilities/CreateElement\";\r\nimport {DraggableWindow} from \"./DraggableWindow\";\r\nimport {taskManager} from \"../globals\";\r\n\r\nexport class AppMenu extends TaskbarEntry {\r\n    isVisible: boolean = false;\r\n\r\n    constructor() {\r\n        super(CreateElement(`<button type=\"button\" class=\"btn\" data-bs-toggle=\"modal\" data-bs-target=\"#appGridModal\"><i class=\"bi bi-grid\"></i></button>`));\r\n\r\n        const modal = CreateElement(`\r\n<div class=\"modal\" id=\"appGridModal\" tabindex=\"-1\" aria-labelledby=\"appGridModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog modal-dialog-centered modal-xl\">\r\n        <div class=\"modal-content bg-transparent border-0\">\r\n            <div class=\"row row-cols-2 row-cols-md-5 g-2 g-sm-1\" id=\"appGrid\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n`);\r\n        document.body.appendChild(modal);\r\n        const appGridContainer = document.getElementById('appGrid');\r\n        if (appGridContainer != null) {\r\n            userConfiguration.ApplicationProvider().map(app => {\r\n                const appButton = CreateElement(`\r\n<button class=\"card d-block mx-auto bg-transparent border-0\" style=\"width: 10rem;\" data-bs-dismiss=\"modal\">\r\n    <img src=\"${app.icon}\" alt=\"${app.title}\" style=\"width: 5rem;\" class=\"card-img-top d-block mx-auto\">\r\n    <div class=\"card-body\">\r\n        <div class=\"card-title text-light text-wrap\">${app.title}</div>\r\n    </div>\r\n</button>`);\r\n                appButton.addEventListener('click', () => {\r\n                    const draggableWindow = new DraggableWindow(app);\r\n                    const task = taskManager.addTask(draggableWindow);\r\n                    draggableWindow.onclose = (force): boolean => {\r\n                        taskManager.removeTask(task.id);\r\n                        return false;\r\n                    }\r\n                });\r\n                const gridEntry = CreateElement(`<div class=\"col\"></div>`);\r\n                gridEntry.appendChild(appButton);\r\n                appGridContainer.appendChild(gridEntry);\r\n            });\r\n            // userConfiguration.ApplicationProvider().map(app => {\r\n            //     this.addMenuItem(CreateElement(`<div><img src=\"${app.icon}\" style=\"height: 32px; width: auto; padding-right: 8px;\" alt=\"${app.title}\"/><span style=\"cursor: pointer;\">${app.title}</span></div>`), () => {\r\n            //         const draggableWindow = new DraggableWindow(app);\r\n            //         const task = taskManager.addTask(draggableWindow);\r\n            //         draggableWindow.onclose = (force): boolean => {\r\n            //             taskManager.removeTask(task.id);\r\n            //             return false;\r\n            //         }\r\n            //     });\r\n            // });\r\n        }\r\n    }\r\n}","// import {CreateElement} from \"../../Utilities/CreateElement\";\r\n//\r\n// export class Clock {\r\n//     dom: HTMLElement;\r\n//\r\n//     constructor() {\r\n//         this.dom = CreateElement(`<p class=\"align-middle pb-0 mb-0 fw-semibold\"></p>`);\r\n//         setInterval(() => {\r\n//             this.updateTime()\r\n//         }, 1000);\r\n//         this.updateTime();\r\n//     }\r\n//\r\n//     updateTime() {\r\n//         const date = new Date();\r\n//         const weekDay = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Fri\", \"Sat\"][date.getDay()];\r\n//         const monthName = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"][date.getMonth()];\r\n//         const monthDay = date.getDate();\r\n//         const hour = date.getHours();\r\n//         const minutes = date.getMinutes();\r\n//         this.dom.innerText = `${weekDay}, ${monthName} ${monthDay}  ${hour}:${minutes}`;\r\n//     }\r\n// }\r\n\r\nimport {TaskbarMenuEntry} from \"./TaskbarMenuEntry\";\r\nimport {CreateElement} from \"../../Utilities/CreateElement\";\r\n\r\nexport class ClockWidget extends TaskbarMenuEntry {\r\n    constructor() {\r\n        super(CreateElement(`<p class=\"align-middle pb-0 mb-0 fw-semibold\"></p>`));\r\n        setInterval(() => this.updateTime(), 1000);\r\n    }\r\n\r\n    updateTime() {\r\n        const date = new Date();\r\n        const weekDay = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Fri\", \"Sat\"][date.getDay()];\r\n        const monthName = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"][date.getMonth()];\r\n        const monthDay = date.getDate();\r\n        const hour = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        this.widget.innerText = `${weekDay}, ${monthName} ${monthDay}  ${hour}:${minutes}`;\r\n    }\r\n}","import {TaskbarEntryIconButton} from \"./TaskbarMenuEntry\";\n\nexport class FullscreenWidget extends TaskbarEntryIconButton {\n    isFullscreen: boolean = false;\n    constructor() {\n        super(\"bi-fullscreen\", undefined, () => {\n            if (this.isFullscreen) {\n                document.exitFullscreen().then(() => {\n                    this.isFullscreen = false;\n                });\n            } else {\n                document.documentElement.requestFullscreen().then(() => {\n                    this.isFullscreen = true;\n                });\n            }\n        });\n    }\n}","import {CreateElement} from \"../Utilities/CreateElement\";\r\nimport {DraggableWindow} from \"./DraggableWindow\";\r\nimport {AppMenu} from \"./AppMenu\";\r\nimport {taskManager} from \"../globals\";\r\nimport {ClockWidget} from \"./Widgets/Clock\";\r\nimport {FullscreenWidget} from \"./Widgets/FullscreenWidget\";\r\nimport {Application} from \"../Types/Application\";\r\nimport {Task} from \"../System/TaskManager\";\r\nimport {userConfiguration} from \"../../config\";\r\n\r\nclass TaskEntry {\r\n    dom: HTMLElement;\r\n    count: HTMLElement;\r\n    isPinned: boolean;\r\n\r\n    constructor(app: Application) {\r\n        const icon = app.icon;\r\n        this.dom = CreateElement(`\r\n<button type=\"button\" style=\"height: 100%;\" class=\"btn btn-transparent position-relative p-0 mx-1\">\r\n<img style=\"height: 100%; width: auto\" src=\"${app.icon}\" alt=\"\">\r\n</button>`);\r\n        this.count = CreateElement(`<span style=\"display: none;\" class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill\">0</span>`);\r\n        this.dom.appendChild(this.count);\r\n        this.isPinned = false;\r\n    }\r\n\r\n    setCount(count: number) {\r\n        this.count.innerText = count.toString();\r\n        if (count === 0) {\r\n            this.count.style.display = 'none';\r\n        } else {\r\n            this.count.style.display = 'block';\r\n        }\r\n    }\r\n}\r\n\r\nexport class Taskbar {\r\n    dom: HTMLElement;\r\n\r\n    startContainer: HTMLElement;\r\n    endContainer: HTMLElement;\r\n\r\n    appMenu: AppMenu;\r\n\r\n    tasks: Map<string, Array<Task>>;\r\n    taskIcons: Map<string, TaskEntry>;\r\n    taskContainer: HTMLElement;\r\n\r\n\r\n    constructor() {\r\n        this.dom = CreateElement(`<div id=\"taskbar\" class=\"fixed-bottom p-1 text-bg-light bg-opacity-75\"></div>`);\r\n        const rowContainer = CreateElement(`<div class=\"row\"></div>`)\r\n        this.dom.appendChild(rowContainer);\r\n\r\n        this.startContainer = CreateElement(`<div align=\"left\" class=\"col align-self-start d-inline-flex my-auto\"></div>`);\r\n        this.endContainer = CreateElement(`<div align=\"right\" class=\"col align-self-end justify-content-end d-inline-flex align-items-center my-auto\"></div>`);\r\n\r\n        rowContainer.appendChild(this.startContainer);\r\n        rowContainer.appendChild(this.endContainer);\r\n\r\n\r\n        this.appMenu = new AppMenu();\r\n        this.appMenu.render(this.startContainer);\r\n\r\n        new ClockWidget().render(this.endContainer);\r\n        new FullscreenWidget().render(this.endContainer);\r\n\r\n        this.taskContainer = CreateElement(`<div class=\"col\" style=\"height: 42px;\"></div>`);\r\n        this.startContainer.appendChild(this.taskContainer);\r\n        this.taskIcons = new Map<string, TaskEntry>();\r\n        this.tasks = new Map<string, Array<Task>>();\r\n\r\n        userConfiguration.PinnedApplicationProvide().map(application => {\r\n            const dockIcon = new TaskEntry(application);\r\n            dockIcon.isPinned = true;\r\n            this.addTaskEntry(application, dockIcon);\r\n        });\r\n\r\n        taskManager.onNewTask(task => {\r\n            const appWindow = <DraggableWindow>task.data;\r\n            const alreadyRunningTask = this.tasks.get(appWindow.app.id);\r\n            if (typeof appWindow.id === \"string\") {\r\n                if (alreadyRunningTask !== undefined) {\r\n                    alreadyRunningTask.push(task);\r\n                    const taskEntry = this.taskIcons.get(appWindow.app.id);\r\n                    if (taskEntry !== undefined) {\r\n                        taskEntry.setCount(alreadyRunningTask.length);\r\n                    }\r\n                } else {\r\n                    this.tasks.set(appWindow.app.id, new Array<Task>(task));\r\n                    let taskEntry = this.taskIcons.get(appWindow.app.id);\r\n                    if (taskEntry === undefined) {\r\n                        taskEntry = new TaskEntry(appWindow.app);\r\n                    }\r\n                    if (!taskEntry.isPinned) {\r\n                        this.addTaskEntry(appWindow.app, taskEntry);\r\n                    }\r\n                    taskEntry.setCount(1);\r\n                }\r\n            }\r\n        });\r\n        taskManager.onRemoveTask(task => {\r\n            const appWindow = <DraggableWindow>task.data;\r\n            let appTasks = this.tasks.get(appWindow.app.id);\r\n            if (appTasks !== undefined) {\r\n                appTasks = appTasks.filter(t => t.id !== task.id);\r\n                const taskIcon = this.taskIcons.get(appWindow.app.id);\r\n                if (taskIcon !== undefined) {\r\n                    taskIcon.setCount(appTasks.length);\r\n                }\r\n                if (appTasks.length === 0) {\r\n                    if (taskIcon !== undefined) {\r\n                        if (!taskIcon.isPinned) {\r\n                            this.removeTaskEntry(taskIcon);\r\n                        }\r\n                    }\r\n                    this.tasks.delete(appWindow.app.id);\r\n                } else {\r\n                    this.tasks.set(appWindow.app.id, appTasks);\r\n                }\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    addTaskEntry(application: Application, taskEntry: TaskEntry): TaskEntry {\r\n        this.taskIcons.set(application.id, taskEntry);\r\n        this.taskContainer.appendChild(taskEntry.dom);\r\n\r\n        taskEntry.dom.addEventListener('click', () => {\r\n            const allWindowsOfApplication = this.tasks.get(application.id);\r\n            if (allWindowsOfApplication !== undefined) {\r\n                const firstWindow = <DraggableWindow>allWindowsOfApplication[0].data;\r\n                const isHidden = firstWindow.hidden;\r\n                allWindowsOfApplication.forEach(task => {\r\n                    const taskWindow = <DraggableWindow>(task.data);\r\n                    taskWindow.hide(!isHidden);\r\n                })\r\n            } else if (taskEntry.isPinned) {\r\n                taskEntry.setCount(1);\r\n                const draggableWindow = new DraggableWindow(application);\r\n                const task = taskManager.addTask(draggableWindow);\r\n                draggableWindow.onclose = (force): boolean => {\r\n                    taskManager.removeTask(task.id);\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n\r\n        return taskEntry;\r\n    }\r\n\r\n    removeTaskEntry(taskEntry: TaskEntry) {\r\n        this.taskContainer.removeChild(taskEntry.dom);\r\n    }\r\n\r\n    render(container: HTMLElement) {\r\n        container.appendChild(this.dom);\r\n    }\r\n}","import {CreateElement} from \"../Utilities/CreateElement\";\r\nimport {userConfiguration} from \"../../config\";\r\nimport {taskManager} from \"../globals\";\r\nimport {DraggableWindow} from \"./DraggableWindow\";\r\n\r\nexport type DesktopEntryType = \"file\" | \"folder\" | \"app\";\r\n\r\nexport interface DesktopEntry {\r\n    name: string;\r\n    icon: string;\r\n    type: DesktopEntryType;\r\n    url: string;\r\n}\r\n\r\nexport class Desktop {\r\n    dom: HTMLElement;\r\n\r\n    constructor() {\r\n        this.dom = CreateElement(`\r\n<div class=\"row row-cols-auto bg-transparent pt-2 ps-3\" style=\"flex: 1;\">\r\n</div>`);\r\n\r\n        userConfiguration.DesktopEntryProvider().map(entry => {\r\n            this.addIcon(entry);\r\n        })\r\n    }\r\n\r\n    addIcon(entry: DesktopEntry) {\r\n        const div = CreateElement(`\r\n<div class=\"col rounded-2 m-2 desktop-entry\">\r\n    <img src=\"${entry.icon}\" class=\"mx-auto d-block\" style=\"height: 45px; width: auto;\" alt=\"${entry.name}\"/>\r\n    <p class=\"bg-light rounded-2 px-1 mt-1 text-center\">${entry.name}</p>\r\n</div>\r\n`);\r\n        div.addEventListener('click', () => {\r\n            const window = new DraggableWindow({\r\n                title: entry.name,\r\n                id: entry.name,\r\n                icon: entry.icon,\r\n                url: entry.url,\r\n            });\r\n            const task = taskManager.addTask(window);\r\n            window.onclose = (force: boolean): boolean => {\r\n                taskManager.removeTask(task.id);\r\n                return false;\r\n            };\r\n\r\n        });\r\n        this.dom.appendChild(div);\r\n    }\r\n\r\n    render(container: HTMLElement) {\r\n        const parent = CreateElement(`\r\n        <div class=\"container-fluid\"></div>\r\n        `);\r\n        parent.appendChild(this.dom);\r\n        container.appendChild(parent);\r\n    }\r\n}","import './index.css';\r\nimport {Taskbar} from \"./Components/Taskbar\";\r\nimport {Desktop} from \"./Components/Desktop\";\r\nimport {userConfiguration} from \"../config\";\r\n\r\ndocument.oncontextmenu = (event) => false;\r\n\r\nconst root = document.getElementById('root');\r\nif (root !== null) {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        const loadingMessages = [\r\n            \"Initializing System\",\r\n            \"Starting System Services\",\r\n            \"Starting Storage Services\",\r\n            \"Starting Application Services\",\r\n            \"Hacking ISRO servers\",\r\n            \"Doing Something Secret\",\r\n            \"Starting Desktop Interface\",\r\n        ];\r\n\r\n        const progressBar = document.getElementById('progress-bar');\r\n        const progressMessage = document.getElementById('progress-message');\r\n        let currentIndex = 0;\r\n        const intervalId = setInterval(() => {\r\n            if (currentIndex >= loadingMessages.length) {\r\n                clearInterval(intervalId);\r\n                const progressContainer = document.getElementById('progress-container');\r\n                if (progressContainer != null) {\r\n                    root.removeChild(progressContainer);\r\n                }\r\n                document.body.style.background = \"\";\r\n                document.body.style.backgroundImage = `url('${userConfiguration.BackgroundProvider()}')`;\r\n\r\n                const taskbar = new Taskbar();\r\n                taskbar.render(root);\r\n\r\n                // const contentMenu = new ContentMenu();\r\n                // contentMenu.start();\r\n\r\n                const desktop = new Desktop();\r\n                desktop.render(root);\r\n            }\r\n            if (progressBar != null) {\r\n                progressBar.style.width = ((currentIndex / loadingMessages.length) * 100) + \"%\";\r\n            }\r\n\r\n            if (progressMessage != null) {\r\n                progressMessage.innerText = loadingMessages[currentIndex];\r\n            }\r\n\r\n            currentIndex++;\r\n        }, 1000);\r\n    });\r\n}\r\n\r\n\r\n"],"names":["CreateElement","html","div","document","createElement","innerHTML","trim","firstElementChild","app","title","class","url","x","y","bottom","getElementById","offsetHeight","addControl","index","image","click","event","window","hide","setTimeout","maximize","WinBox","widget","this","dom","render","container","appendChild","setAttribute","menu","addMenuItem","action","item","addEventListener","TaskbarEntry","icon","label","undefined","TaskbarMenuEntry","applicationData","forEach","id","push","desktopEntryData","name","type","userConfiguration","filter","find","handlers","handle","h","register","handler","running","Map","processes","newTaskDispatcher","EventDispatcher","removeTaskDispatcher","addTask","data","task","set","removeTask","get","delete","onNewTask","newTaskHandler","onRemoveTask","removeTaskHandler","services","service","call","target","message","Error","taskManager","TaskManager","ServiceManager","isVisible","modal","body","appGridContainer","map","appButton","draggableWindow","DraggableWindow","onclose","force","gridEntry","setInterval","updateTime","date","Date","weekDay","getDay","monthName","getMonth","monthDay","getDate","hour","getHours","minutes","getMinutes","innerText","isFullscreen","exitFullscreen","then","documentElement","requestFullscreen","TaskbarEntryIconButton","count","isPinned","setCount","toString","style","display","rowContainer","startContainer","endContainer","appMenu","AppMenu","ClockWidget","FullscreenWidget","taskContainer","taskIcons","tasks","application","dockIcon","TaskEntry","addTaskEntry","taskEntry","appWindow","alreadyRunningTask","length","Array","appTasks","t","taskIcon","removeTaskEntry","allWindowsOfApplication","hidden","removeChild","entry","addIcon","parent","oncontextmenu","root","loadingMessages","progressBar","progressMessage","currentIndex","intervalId","clearInterval","progressContainer","background","backgroundImage","Taskbar","Desktop","width"],"sourceRoot":""}